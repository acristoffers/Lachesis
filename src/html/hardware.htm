<div flex>
  <div stretch></div>
  <div id="hardware">
    <h1>{{ 'Hardware Setup' | translate }}</h1>

    <md-card id="driver">
      <md-card-content>
        <md-select class="width-100" placeholder="{{ 'Driver' | translate }}" [(ngModel)]="selectedDriver">
          <md-option *ngFor="let driver of availableDrivers; trackBy:driveTracker" [value]="driver">
            {{ driver.name }}
          </md-option>
        </md-select>
      </md-card-content>
    </md-card>

    <md-card id="setup" *ngIf="!!selectedDriver && selectedDriver.has_setup">
      <md-card-header>
        <md-card-title>
          {{ 'Setup' | translate }}
          <md-icon class="tooltip" mdTooltip="{{ 'Fill the driver setup options. For information about the properties, read the documentation of the AHIO library.' | translate }}">info_outline</md-icon>
        </md-card-title>
      </md-card-header>
      <md-card-content>
        <md-input-container class="width-100" class="setup-argument" *ngFor="let argument of selectedDriver.setup_arguments">
          <input mdInput [placeholder]="argument.name" [value]=" argument.default_value | removeUndefined " [(ngModel)]="argument.value">
        </md-input-container>
      </md-card-content>
    </md-card>

    <md-card id="ports" *ngIf="!!selectedDriver">
      <md-card-header>
        <md-card-title>{{ 'Ports' | translate }}</md-card-title>
      </md-card-header>
      <md-card-content>
        <table>
          <thead>
            <tr>
              <th>
                <span mdTooltip="{{ 'The name of the port as known by the AHIO driver.' | translate }}">{{ 'Port Name' | translate }}</span>
              </th>
              <th>
                <span mdTooltip="{{ 'A valid python variable name that will be used in code to refer to this port value.' | translate }}">{{ 'Port Alias' | translate }}</span>
              </th>
              <th>
                <span>{{ 'Port Type' | translate }}</span>
              </th>
              <th>
                <span>{{ 'Initial Value' | translate }}</span>
              </th>
              <th>
                <span>{{ 'Internal ID' | translate }}</span>
              </th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let port of ports" inline-form>
              <td class="port-name">
                <md-input-container class="width-100" *ngIf="!selectedDriver.ports.length">
                  <input mdInput [placeholder]="'Port Name' | translate" [(ngModel)]="port.name">
                </md-input-container>
                <md-select class="width-100" *ngIf="!!selectedDriver.ports.length" [placeholder]="'Port Name' | translate" [(ngModel)]="port.name">
                  <md-option *ngFor="let driverPort of selectedDriver.ports" [value]="driverPort.id">
                    {{ driverPort.name }}
                  </md-option>
                </md-select>
              </td>
              <td class="port-alias">
                <md-input-container class="width-100">
                  <input mdInput [placeholder]="'Port Alias' | translate" [(ngModel)]="port.alias">
                </md-input-container>
              </td>
              <td class="port-type">
                <md-select class="width-100" [placeholder]="'Port Type' | translate" [(ngModel)]="port.type">
                  <md-option *ngFor="let p of portTypes(port.name)" [value]="p">
                    {{ portTypeName(p)[0] | translate }} - {{ portTypeName(p)[1] | translate }}
                  </md-option>
                </md-select>
              </td>
              <td class="port-value">
                <md-input-container class="width-100">
                  <input mdInput [placeholder]="'Initial Value' | translate" [(ngModel)]="port.defaultValue">
                </md-input-container>
              </td>
              <td class="port-id">
                <span>{{ port.id }}</span>
              </td>
              <td>
                <button md-raised-button color="warn" (click)="removePort(port)">{{ 'Remove' | translate }}</button>
              </td>
            </tr>
          </tbody>
        </table>
      </md-card-content>
      <md-card-actions>
        <button md-raised-button color="secondary" (click)="addPort()">{{ 'Add' | translate }}</button>
      </md-card-actions>
    </md-card>

    <md-card id="calibration" *ngIf="!!selectedDriver && ((inputAliases?.length > 0) || (outputAliases?.length > 0))">
      <md-card-header>
        <md-card-title>{{ 'Calibration' | translate }}</md-card-title>
      </md-card-header>
      <md-card-content>
        <table>
          <thead>
            <tr>
              <th>
                <span>{{ 'Port' | translate }}</span>
              </th>
              <th>
                <span>{{ 'Alias' | translate }}</span>
              </th>
              <th>
                <span mdTooltip="{{ 'The formula that calibrates this port. Use the variable x in place of the value of the input. If port is of type Input, the value of the input will be passed through the expression. If it an output, the value assigned to the variable will be passed through the expression before sending to the driver.' | translate }}">{{ 'Formula' | translate }}</span>
              </th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let calibration of calibrations" inline-form>
              <td>
                <md-select [placeholder]="'Port' | translate" [(ngModel)]="calibration.port" class="width-100">
                  <md-option *ngFor="let port of ports" [value]="port.id">
                    {{ port.alias }}
                  </md-option>
                </md-select>
              </td>
              <td>
                <md-input-container class="width-100">
                  <input mdInput [placeholder]="'Alias' | translate" [(ngModel)]="calibration.alias">
                </md-input-container>
              </td>
              <td class="calibration-formula">
                <md-input-container class="width-100">
                  <input mdInput [placeholder]="'Formula' | translate" [(ngModel)]="calibration.formula">
                </md-input-container>
              </td>
              <td>
                <button md-raised-button color="warn" (click)="removeCalibration(calibration)">{{ 'Remove' | translate }}</button>
              </td>
            </tr>
          </tbody>
        </table>
      </md-card-content>
      <md-card-actions>
        <button md-raised-button color="secondary" (click)="addCalibration()">{{ 'Add' | translate }}</button>
      </md-card-actions>
    </md-card>

    <md-card id="interlocking" *ngIf="!!selectedDriver && (inputAliases?.length > 0) && (outputAliases?.length > 0)">
      <md-card-header>
        <md-card-title mdTooltip="{{ 'Sets the output of some port to some value if Expression evaluates to true.' | translate }}">{{ 'Interlock' | translate }}</md-card-title>
      </md-card-header>
      <md-card-content>
        <table>
          <thead>
            <tr>
              <th>
                <span>{{ 'Input' | translate }}</span>
              </th>
              <th>
                <span mdTooltip="{{ 'Just like in Formula, x stands for the input value.' | translate }}">{{ 'Expression' | translate }}</span>
              </th>
              <th>
                <span>{{ 'Output' | translate }}</span>
              </th>
              <th>
                <span>{{ 'Value' | translate }}</span>
              </th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            <tr *ngFor="let interlock of interlocks" inline-form>
              <td>
                <md-select class="width-100" [placeholder]="'Input' | translate" [(ngModel)]="interlock.sensor">
                  <md-option *ngFor="let alias of inputAliases" [value]="alias">
                    {{ alias }}
                  </md-option>
                </md-select>
              </td>
              <td>
                <md-input-container stretch>
                  <input mdInput [placeholder]="'Expression' | translate" [(ngModel)]="interlock.expression">
                </md-input-container>
              </td>
              <td>
                <md-select class="width-100" [placeholder]="'Output' | translate" [(ngModel)]="interlock.actuator">
                  <md-option *ngFor="let alias of outputAliases" [value]="alias">
                    {{ alias }}
                  </md-option>
                </md-select>
              </td>
              <td>
                <md-input-container class="width-100">
                  <input mdInput [placeholder]="'Value' | translate" [(ngModel)]="interlock.actuatorValue">
                </md-input-container>
              </td>
              <td>
                <button md-raised-button color="warn" (click)="removeInterlock(interlock)">{{ 'Remove' | translate }}</button>
              </td>
            </tr>
          </tbody>
        </table>
      </md-card-content>
      <md-card-actions>
        <button md-raised-button color="secondary" (click)="addInterlock()">{{ 'Add' | translate }}</button>
      </md-card-actions>
    </md-card>

    <md-card *ngIf="!!selectedDriver">
      <md-card-content>
        <button md-raised-button color="primary" (click)="applyDriver()">{{ 'Apply' | translate }}</button>
        <button md-raised-button (click)="resetDriver()">{{ 'Reset' | translate }}</button>
      </md-card-content>
    </md-card>
  </div>
  <div stretch></div>
</div>